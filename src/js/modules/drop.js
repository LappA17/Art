/* Сделать так что бы на страницу можно было не загружать изображение, а перетаскивать */

/* drag *
   dragend *
   dragenter - возникает тогда, когда перетаскиваемый объект перетаскивается над какой-то dropArea(любой элемент ктрй воспринимает это событие)
   dragexit *
   dragleave - наш перетаскиваемый объект перетащили за пределы dropAre
   dragover - срабатываем каждые сотни милисекунд пока объект перетаскивается над dropArea
   dragstart *
   drop - когда пользователь отпустил кнопку мышки и наш объект отправился в dropArea
   
   * - это все события которые срабатывают на элементе который мы перетаскиваем именно как ДОМ элементы, а нам нужно
именно файловые элементы*/
const drop = () => {
    const fileInputs = document.querySelectorAll('[name="upload"]'); /* передаем атрибут инпута который находится в блоке с зарузить
файл, только сам див маленький, а инпут на весь экран. У нас на сайте две формы с загрузкой изображения */

    /* теперь на каждый из этих инпутов нужно повесить 4 разных драга. Создадим массив событий */
    ["dragenter", "dragleave", "dragover", "drop"].forEach(eventName => {
        fileInputs.forEach(input => {
            input.addEventListener(eventName, preventDefaults, false);
/*  в обработчик событий передаем событие который нам прийдет от драга(тут понятно),
    preventDefaults - это будет функция потому что когда перетаскиваешь фото на страницу у тебя страница перезагружается и
открывается фото в новой вкладке
    false - настройка наших событий  */
        });
    });

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation(); // Прекращает дальнейшую передачу текущего события.
    }

    /* Теперь нужно дать понять пользователю что он действительно перетаскивает элемент над нужной областью */
    function highlight(item) { // item это элемент который нужно подсветить
        /* Мы сейчас работает с инпутами (который на весь экран), а нам необходимо подсветить див где у нас есть класс file_upload
Соотвественно мы можем найти ближайший класс file_upload и с ним что сделать */
        item.closest('.file_upload').style.border = "5px solid yellow";
/* item.closest('.file_upload') - дословно: находим ближайший к айтем элемент с классом файл_аплоад */
        item.closest('.file_upload').style.backgroundColor = "rgba(0,0,0 .7)"; //.7 - альфаканал какой-то
    }

    /* Теперь нужна обратная фция , после события убирать эту метку */
    function unhighlight(item) {
        item.closest('.file_upload').style.border = "none";
        if (item.closest('.calc_form')) { /* если у нашего айтема есть родитель с таким классом calc_form*/
            item.closest('.file_upload').style.backgroundColor = "#fff";// белый цвет
        } else {
            item.closest('.file_upload').style.backgroundColor = "#ededed";
        } /* если calc_form нет то значит эта форма используется в модельном окне  */

/* Это условие было сделано лишь для того что бы в мод окне и на странице не было серого цвета на фоне белого для красоты !!! */   
    }

    // поработаем с событиями

    /* Сначала то что как-то разукаршивает нашу область куда попадет наше изображене */
    ["dragenter", "dragover"].forEach(eventName => {
        fileInputs.forEach(input => {
            input.addEventListener(eventName, () => highlight(input), false);
        });
    }); /* Мы берем два события "dragenter", "dragover" который отвечаю за работу мышкой когда файл находится над областью попадания
что бы если мышкой наводился то оно подсвечивало, если не наводил то неподсвечивало. Потом перебираем все файловые инпуты для работы на странице
и на каждый инпут навешиваем это событие и ставим такой обработчик куда передаем фцию*/

    /* Теперь сделаем обратную ситуацию, когда у нас происходит событие драг и дроплив. Те когда мы просто файл отпускаем в инпут или уходим
мышкой от него то АНХАЙЛАЙТ(те убираем подстетку с элементов)*/
    ["dragleave", "drop"].forEach(eventName => {
        fileInputs.forEach(input => {
            input.addEventListener(eventName, () => unhighlight(input), false);
        });
    });
    /* Теперь все работает, подсвечивается желтеньким область после наведение фото на область, осталось реализовать
фционал что бы картинка перетаскивалась и загружалась сразу на страницу  */
    fileInputs.forEach(input => {
        input.addEventListener('drop', (e) => { // drop когда пользователь дропает фото в загрузки
            input.files = e.dataTransfer.files;
/* input.files - в этом свойсвте лежат те файлы, которые загрузил пользователь, их модифицировать вручную нельзе, но можно прописать
e.dataTransfer - это тот объект с файлом , которые мы перетасикваем из файловой структуры, и дальше нам понадобится files так как в 
дата трансфере есть много параметров которые нас не интересуют. Те мы берем тот файт которые мы дропаем с нашего компа условно
а это именно e.dataTransfer.files и засовыаем их просто в input.files */

            let dots;
            const arr = input.files[0].name.split('.');

            arr[0].length > 6 ? dots = "..." : dots = '.';
            const name = arr[0].substring(0, 6) + dots + arr[1];
            input.previousElementSibling.textContent = name;
/* это мы скопировали фционал с forms.js для обрезание что бы не было кучу букв */
        });
    });

};
export default drop;